// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package spies

import (
	model "expense-api/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// RepositorySpy is an autogenerated mock type for the Repository type
type RepositorySpy struct {
	mock.Mock
}

// PartyCreate provides a mock function with given fields: w
func (_m *RepositorySpy) PartyCreate(w *model.Party) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Party) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartyDelete provides a mock function with given fields: id
func (_m *RepositorySpy) PartyDelete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartyGet provides a mock function with given fields: id
func (_m *RepositorySpy) PartyGet(id uint) (*model.Party, error) {
	ret := _m.Called(id)

	var r0 *model.Party
	if rf, ok := ret.Get(0).(func(uint) *model.Party); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartyList provides a mock function with given fields: userID
func (_m *RepositorySpy) PartyList(userID uint) ([]*model.Party, error) {
	ret := _m.Called(userID)

	var r0 []*model.Party
	if rf, ok := ret.Get(0).(func(uint) []*model.Party); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartyUpdate provides a mock function with given fields: id, w
func (_m *RepositorySpy) PartyUpdate(id uint, w *model.Party) (*model.Party, error) {
	ret := _m.Called(id, w)

	var r0 *model.Party
	if rf, ok := ret.Get(0).(func(uint, *model.Party) *model.Party); ok {
		r0 = rf(id, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Party)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *model.Party) error); ok {
		r1 = rf(id, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionCreate provides a mock function with given fields: t
func (_m *RepositorySpy) TransactionCreate(t *model.Transaction) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Transaction) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionDelete provides a mock function with given fields: id
func (_m *RepositorySpy) TransactionDelete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionGet provides a mock function with given fields: id
func (_m *RepositorySpy) TransactionGet(id uint) (*model.Transaction, error) {
	ret := _m.Called(id)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(uint) *model.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionList provides a mock function with given fields: userID
func (_m *RepositorySpy) TransactionList(userID uint) ([]*model.Transaction, error) {
	ret := _m.Called(userID)

	var r0 []*model.Transaction
	if rf, ok := ret.Get(0).(func(uint) []*model.Transaction); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionListByParty provides a mock function with given fields: userID, partyID
func (_m *RepositorySpy) TransactionListByParty(userID uint, partyID uint) ([]*model.Transaction, error) {
	ret := _m.Called(userID, partyID)

	var r0 []*model.Transaction
	if rf, ok := ret.Get(0).(func(uint, uint) []*model.Transaction); ok {
		r0 = rf(userID, partyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, partyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionListByWallet provides a mock function with given fields: userID, walletID
func (_m *RepositorySpy) TransactionListByWallet(userID uint, walletID uint) ([]*model.Transaction, error) {
	ret := _m.Called(userID, walletID)

	var r0 []*model.Transaction
	if rf, ok := ret.Get(0).(func(uint, uint) []*model.Transaction); ok {
		r0 = rf(userID, walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionUpdate provides a mock function with given fields: id, t
func (_m *RepositorySpy) TransactionUpdate(id uint, t *model.Transaction) (*model.Transaction, error) {
	ret := _m.Called(id, t)

	var r0 *model.Transaction
	if rf, ok := ret.Get(0).(func(uint, *model.Transaction) *model.Transaction); ok {
		r0 = rf(id, t)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *model.Transaction) error); ok {
		r1 = rf(id, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCreate provides a mock function with given fields: firstName, LastName, Email, Password, Salt
func (_m *RepositorySpy) UserCreate(firstName string, LastName string, Email string, Password string, Salt string) (*model.User, error) {
	ret := _m.Called(firstName, LastName, Email, Password, Salt)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) *model.User); ok {
		r0 = rf(firstName, LastName, Email, Password, Salt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(firstName, LastName, Email, Password, Salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserDelete provides a mock function with given fields: id
func (_m *RepositorySpy) UserDelete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGet provides a mock function with given fields: id
func (_m *RepositorySpy) UserGet(id uint) (*model.User, error) {
	ret := _m.Called(id)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(uint) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserGetWithEmail provides a mock function with given fields: email
func (_m *RepositorySpy) UserGetWithEmail(email string) (*model.User, error) {
	ret := _m.Called(email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserUpdate provides a mock function with given fields: id, firstName, LastName, Email
func (_m *RepositorySpy) UserUpdate(id uint, firstName string, LastName string, Email string) (*model.User, error) {
	ret := _m.Called(id, firstName, LastName, Email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(uint, string, string, string) *model.User); ok {
		r0 = rf(id, firstName, LastName, Email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, string, string, string) error); ok {
		r1 = rf(id, firstName, LastName, Email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletCreate provides a mock function with given fields: w
func (_m *RepositorySpy) WalletCreate(w *model.Wallet) error {
	ret := _m.Called(w)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Wallet) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletDelete provides a mock function with given fields: id
func (_m *RepositorySpy) WalletDelete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WalletGet provides a mock function with given fields: id
func (_m *RepositorySpy) WalletGet(id uint) (*model.Wallet, error) {
	ret := _m.Called(id)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(uint) *model.Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletList provides a mock function with given fields: userID
func (_m *RepositorySpy) WalletList(userID uint) ([]*model.Wallet, error) {
	ret := _m.Called(userID)

	var r0 []*model.Wallet
	if rf, ok := ret.Get(0).(func(uint) []*model.Wallet); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WalletUpdate provides a mock function with given fields: id, w
func (_m *RepositorySpy) WalletUpdate(id uint, w *model.Wallet) (*model.Wallet, error) {
	ret := _m.Called(id, w)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(uint, *model.Wallet) *model.Wallet); ok {
		r0 = rf(id, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *model.Wallet) error); ok {
		r1 = rf(id, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
