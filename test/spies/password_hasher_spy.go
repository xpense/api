// Code generated by mockery v2.12.2. DO NOT EDIT.

package spies

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// PasswordHasherSpy is an autogenerated mock type for the PasswordHasher type
type PasswordHasherSpy struct {
	mock.Mock
}

// GenerateSalt provides a mock function with given fields:
func (_m *PasswordHasherSpy) GenerateSalt() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: password, salt
func (_m *PasswordHasherSpy) HashPassword(password string, salt string) (string, error) {
	ret := _m.Called(password, salt)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(password, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(password, salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPasswordHasherSpy creates a new instance of PasswordHasherSpy. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPasswordHasherSpy(t testing.TB) *PasswordHasherSpy {
	mock := &PasswordHasherSpy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
